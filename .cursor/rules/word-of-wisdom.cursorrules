---
description: "Word of Wisdom PoW-сервис: правила разработки на Go"
alwaysApply: true
globs: []
---

# Word of Wisdom: Правила разработки

## Технологии и архитектура

- **Язык**: Go 1.22, **только стандартная библиотека** (никаких внешних зависимостей).
- **Структура проекта**:
  - `cmd/server` — TCP-сервер, выдаёт quotes после решения PoW.
  - `cmd/client` — клиент, запрашивает challenge, решает PoW, получает цитату.
  - `internal/pow` — PoW-логика (hashcash: генерация challenge, решение, верификация).
  - `internal/quotes` — пул цитат, функция `Random()`.
  - `internal/server` — хелперы для TCP-сервера (протокол, логика обработки).

## Протокол взаимодействия

- **Транспорт**: TCP, JSON-объекты построчно (newline-delimited).
- **Flow**:
  1. Клиент подключается → сервер отправляет `challenge` (JSON).
  2. Клиент решает PoW → отправляет `solution` (JSON с nonce).
  3. Сервер проверяет → отправляет `quote` (JSON) или `error`.

## PoW (Proof-of-Work)

- **Алгоритм**: hashcash-подход.
- **Вычисление**: `SHA-256(challenge_string + ':' + nonce)`.
- **Условие**: результат имеет **≥ N ведущих нулевых бит** (N — сложность из challenge).
- **Challenge** содержит:
  - `ver` (версия, например "1")
  - `alg` (алгоритм, например "sha256")
  - `bits` (сложность, например 20)
  - `ts` (timestamp Unix)
  - `expires_in` (TTL в секундах, например 300)
  - `resource` (идентификатор ресурса, например "quote")
  - `salt` (случайная строка для уникальности)

## Проверки на сервере

- **Временное окно**: `ts <= now <= ts + expires_in`.
- **Resource**: совпадает с ожидаемым (например, "quote").
- **Digest**: SHA-256 от `challenge_string:nonce` содержит **≥ bits** ведущих нулевых бит.
- **Лимиты**: 1 попытка решения на соединение, дедлайны чтения/записи.

## Конфигурация

- **Через ENV**:
  - `WOW_ADDR` — адрес сервера (default: `:8080`).
  - `WOW_BITS` — сложность PoW (default: `20`).
  - `WOW_EXPIRES` — TTL challenge в секундах (default: `300`).
- Никаких hardcoded-значений.

## Docker

- **Два multi-stage Dockerfile**:
  - `Dockerfile.server` → образ сервера.
  - `Dockerfile.client` → образ клиента.
- **docker-compose.yml** для запуска server + client.

## Тесты

- **Unit**: тесты для `internal/pow` (генерация, решение, верификация).
- **Негативные кейсы**: истёкший challenge, неверный nonce, недостаточная сложность.
- **Интеграция**: простой тест server ↔ client (запуск, challenge, solution, quote).
- Никаких внешних зависимостей в тестах.

## Качество кода

- **Стиль**: `gofmt`, `go vet`, `golangci-lint`.
- **Функции**: короткие (≤50 строк), без глобального состояния.
- **Логирование**: минимальное, структурированное (JSON).
- **Ошибки**: явные, оборачивание через `fmt.Errorf("context: %w", err)`.

## Случайность

- **Salt**: генерируется crypto/rand.
- **Quotes**: выдаются через `internal/quotes.Random()` (используя crypto/rand).

## Дополнительные требования

- Никаких race conditions (тестировать с `-race`).
- Graceful shutdown (обработка SIGTERM/SIGINT).
- Метрики/healthz — опционально (если время позволяет).

